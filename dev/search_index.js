var documenterSearchIndex = {"docs":
[{"location":"#","page":"PatentsBase","title":"PatentsBase","text":"CurrentModule = PatentsBase","category":"page"},{"location":"#PatentsBase-1","page":"PatentsBase","title":"PatentsBase","text":"","category":"section"},{"location":"#","page":"PatentsBase","title":"PatentsBase","text":"Documentation for PatentsBase.","category":"page"},{"location":"#","page":"PatentsBase","title":"PatentsBase","text":"","category":"page"},{"location":"#","page":"PatentsBase","title":"PatentsBase","text":"Modules = [PatentsBase]","category":"page"},{"location":"#PatentsBase.AbstractApplicant","page":"PatentsBase","title":"PatentsBase.AbstractApplicant","text":"abstract type AbstractApplicant <: AbstractParty\n\nAn abstract type representing an interface for a patent applicant.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractApplication","page":"PatentsBase","title":"PatentsBase.AbstractApplication","text":"abstract type AbstractApplication\n\nAn abstract type representing an interface for a patent application.\n\nPatentsLens.jl includes a general interface for working with different types of patent data, which should also be implemented by the concrete subtypes, as permitted by the respective data source.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractApplicationID","page":"PatentsBase","title":"PatentsBase.AbstractApplicationID","text":"abstract type AbstractApplicationID <: AbstractApplicationReference\n\nAn abstract type representing an interface for an application reference by jurisdiction, document number, and (optionally) kind. This is the preferred reference type to allow cross-referencing of applications across different data sources and formats.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractApplicationReference","page":"PatentsBase","title":"PatentsBase.AbstractApplicationReference","text":"abstract type AbstractApplicationReference\n\nAn abstract type representing a reference to a patent application. Implementations should be coupled with an implementation of AbstractDataSource to allow lookup of the referenced application in the data source, using the find_application function.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractCitation","page":"PatentsBase","title":"PatentsBase.AbstractCitation","text":"abstract type AbstractCitation\n\nAn abstract type representing an interface for a citation in a patent application.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractClaim","page":"PatentsBase","title":"PatentsBase.AbstractClaim","text":"abstract type AbstractClaim <: AbstractContent\n\nAn abstract type representing an interface for a single claim associated with a patent application.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractClaims","page":"PatentsBase","title":"PatentsBase.AbstractClaims","text":"abstract type AbstractClaims <: AbstractContent\n\nAn abstract type representing an interface for the claims associated with a patent application.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractClassificationLevel","page":"PatentsBase","title":"PatentsBase.AbstractClassificationLevel","text":"abstract type AbstractClassificationLevel\n\nAbstract type representing a level in a hierarchical technology classification system.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractClassificationSymbol","page":"PatentsBase","title":"PatentsBase.AbstractClassificationSymbol","text":"abstract type AbstractClassificationSymbol\n\nAbstract type representing a patent classification entry. Specific implementations should at least implement symbol(c::AbstractClassificationSymbol) and, if possible, also title.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractClassificationSystem","page":"PatentsBase","title":"PatentsBase.AbstractClassificationSystem","text":"abstract type AbstractClassificationSystem\n\nAbstract type representing a system for technology classification of patents, such as the Cooperative Patent Classification (CPC).\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractContent","page":"PatentsBase","title":"PatentsBase.AbstractContent","text":"abstract type AbstractContent\n\nAn abstract type representing an interface for content fields of a patent application. There are five abstract content fields that are subtypes of this type: AbstractTitle, AbstractDescription, AbstractClaim, AbstractClaims, AbstractFulltext.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractDataSource","page":"PatentsBase","title":"PatentsBase.AbstractDataSource","text":"abstract type AbstractDataSource\n\nAn abstract type representing an interface for a patent data source. Data sources can be in-memory data structures, wrappers around databases or API consumers.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractDescription","page":"PatentsBase","title":"PatentsBase.AbstractDescription","text":"abstract type AbstractDescription <: AbstractContent\n\nAn abstract type representing an interface for the abstract or short description of a patent. The type is deliberately not named \"AbstractAbstract\" to avoid confusion.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractFamily","page":"PatentsBase","title":"PatentsBase.AbstractFamily","text":"abstract type AbstractFamily\n\nAn abstract type representing an interface for a patent family.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractFilter","page":"PatentsBase","title":"PatentsBase.AbstractFilter","text":"abstract type AbstractFilter\n\nAbstract type representing a filter that can be applied to an AbstractDataSource. In principle, any predicate that can apply to an application or patent family can be a filter. However, some filter options may not be implemented for all data sources. Filters are composable using the UnionFilter and IntersectionFilter structs and the corresponding | and & infix operators.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractFulltext","page":"PatentsBase","title":"PatentsBase.AbstractFulltext","text":"abstract type AbstractFulltext <: AbstractContent\n\nAn abstract type representing an interface for the full text of a patent application.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractIPCLikeClassificationLevel","page":"PatentsBase","title":"PatentsBase.AbstractIPCLikeClassificationLevel","text":"abstract type AbstractIPCLikeClassificationLevel <: AbstractClassificationLevel\n\nAbstract type representing a level in an IPC-like technology classification system.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractInventor","page":"PatentsBase","title":"PatentsBase.AbstractInventor","text":"abstract type AbstractInventor <: AbstractParty\n\nAn abstract type representing an interface for an inventor.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractNPLCitation","page":"PatentsBase","title":"PatentsBase.AbstractNPLCitation","text":"abstract type AbstractNPLCitation <: AbstractCitation\n\nAn abstract type representing an interface for a citation of non-patent literature (NPL) in a patent application.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractParty","page":"PatentsBase","title":"PatentsBase.AbstractParty","text":"abstract type AbstractParty\n\nAn abstract type representing an interface for a patent application party. The two types of parties are applicants and inventors, represented by the types AbstractApplicant and AbstractInventor, respectively.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractPatentCitation","page":"PatentsBase","title":"PatentsBase.AbstractPatentCitation","text":"abstract type AbstractPatentCitation <: AbstractCitation\n\nAn abstract type representing an interface for a citation of another patent document (NPL) in a patent application.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractPortfolio","page":"PatentsBase","title":"PatentsBase.AbstractPortfolio","text":"abstract type AbstractPortfolio\n\nAn abstract type representing an interface for an entity's patent portfolio.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractSearch","page":"PatentsBase","title":"PatentsBase.AbstractSearch","text":"struct AbstractSearch <: SearchableContentField\n\nDispatch type referring to a search in the abstract descriptions of documents.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AbstractTitle","page":"PatentsBase","title":"PatentsBase.AbstractTitle","text":"abstract type AbstractTitle <: AbstractContent\n\nAn abstract type representing an interface for the title(s) of a patent application.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.AllFilter","page":"PatentsBase","title":"PatentsBase.AllFilter","text":"struct AllFilter <: AbstractFilter\n\nPseudo-filter that matches all applications or families in a database.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.CPCSymbol","page":"PatentsBase","title":"PatentsBase.CPCSymbol","text":"struct CPCSymbol <: IPCLikeSymbol\n\nStruct representing a minimal technology classification entry according to the CPC.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.ClaimsSearch","page":"PatentsBase","title":"PatentsBase.ClaimsSearch","text":"struct ClaimsSearch <: SearchableContentField\n\nDispatch type referring to a search in the claims section of documents.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.Class","page":"PatentsBase","title":"PatentsBase.Class","text":"struct Class <: AbstractIPCLikeClassificationLevel\n\nDispatch type referring to the class level of an IPC-like technology classification.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.ClassificationFilter","page":"PatentsBase","title":"PatentsBase.ClassificationFilter","text":"struct ClassificationFilter <: AbstractFilter\n\nStruct representing a database filter by IPC-like classification.\n\nsystem: The classification system used. Can be either IPC() or CPC().\nlevel: The AbstractIPCLikeClassificationLevel at which to filter (Section(), Class(), Subclass() etc.)\nsymbols: A Vector{IPCLikeSymbol} of all classifications included. The filter will match any application classified by at least one of these.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.ContentFilter","page":"PatentsBase","title":"PatentsBase.ContentFilter","text":"struct ContentFilter <: AbstractFilter\n\nContentFilter(search_query::String, field::SearchableContentField, [languages::Vector{String}])\nContentFilter(search_query::String, fields::Vector{<:SearchableContentField}, [languages::Vector{String}])\n\nStruct representing a database filter using full-text search on various content fields.\n\nParameters:\n\nsearch_query: The keyword(s), phrase(s) or complex query to be used for the search.   Query syntax may vary across data sources, but should be broadly similar to   https://www.sqlite.org/fts5.html#fulltextquery_syntax.\nfield / fields: Specifies which SearchableContentField(s) is/are used for the search.   Possible values are TitleSearch(), AbstractSearch(), ClaimsSearch(), or FulltextSearch().   A vector can be passed, in which case the constructor actually creates a UnionFilter.\nlanguages (optional): A vector of two-character language codes specifying the languages for which matches are included.   If an empty vector is passed (as by default), all available languages are included.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.FulltextSearch","page":"PatentsBase","title":"PatentsBase.FulltextSearch","text":"struct FulltextSearch <: SearchableContentField\n\nDispatch type referring to a search in the full text of documents.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.IPCSymbol","page":"PatentsBase","title":"PatentsBase.IPCSymbol","text":"struct IPCSymbol <: IPCLikeSymbol\n\nStruct representing a minimal technology classification entry according to the IPC.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.IntersectionFilter","page":"PatentsBase","title":"PatentsBase.IntersectionFilter","text":"struct IntersectionFilter <: AbstractFilter\n\nIntersectionFilter(a::AbstractFilter, b::AbstractFilter)\n\nStruct representing the intersection or conjunction of two AbstractFilters. As a shorthand syntax for this composition, the '&' operator may be used:\n\nfilter3 = filter1 & filter2 # intersection of filter1 and filter2\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.Maingroup","page":"PatentsBase","title":"PatentsBase.Maingroup","text":"struct Maingroup <: AbstractIPCLikeClassificationLevel\n\nDispatch type referring to the group level of an IPC-like technology classification.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.SearchableContentField","page":"PatentsBase","title":"PatentsBase.SearchableContentField","text":"abstract type SearchableContentField\n\nAbstract type representing a fulltext-searchable application content field.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.Section","page":"PatentsBase","title":"PatentsBase.Section","text":"struct Section <: AbstractIPCLikeClassificationLevel\n\nDispatch type referring to the section level of an IPC-like technology classification.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.Subclass","page":"PatentsBase","title":"PatentsBase.Subclass","text":"struct Subclass <: AbstractIPCLikeClassificationLevel\n\nDispatch type referring to the subclass level of an IPC-like technology classification.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.Subgroup","page":"PatentsBase","title":"PatentsBase.Subgroup","text":"struct Subgroup <: AbstractIPCLikeClassificationLevel\n\nDispatch type referring to the subgroup level of an IPC-like technology classification.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.TitleSearch","page":"PatentsBase","title":"PatentsBase.TitleSearch","text":"struct TitleSearch <: SearchableContentField\n\nDispatch type referring to a search in the titles of documents.\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.UnionFilter","page":"PatentsBase","title":"PatentsBase.UnionFilter","text":"struct UnionFilter <: AbstractFilter\n\nUnionFilter(a::AbstractFilter, b::AbstractFilter)\n\nStruct representing the union or disjunction of two AbstractFilters. As a shorthand syntax for this composition, the '|' operator may be used:\n\nfilter3 = filter1 | filter2 # union of filter1 and filter2\n\n\n\n\n\n","category":"type"},{"location":"#PatentsBase.aggregate_families","page":"PatentsBase","title":"PatentsBase.aggregate_families","text":"aggregate_families(apps::Vector{<:AbstractApplication})\n\nAggregate the applications apps into an array of patent families.\n\n\n\n\n\n","category":"function"},{"location":"#PatentsBase.applicants-Tuple{AbstractApplication}","page":"PatentsBase","title":"PatentsBase.applicants","text":"applicants(a::AbstractApplication)\n\nreturn a Vector{<:AbstractApplicant} with information about the applicant(s) of application a.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.applicants-Tuple{AbstractFamily}","page":"PatentsBase","title":"PatentsBase.applicants","text":"applicants(f::AbstractFamily)\n\nreturn a Vector{<:AbstractApplicant} with the unique set of applicants from all the applications in family f.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.applications","page":"PatentsBase","title":"PatentsBase.applications","text":"applications(ds::AbstractDataSource, kwargs...)\napplications(ds::AbstractDataSource, filter::AbstractFilter, kwargs...)\n\nReturn a Vector{<:AbstractApplication} with all applications contained in ds. May take a long time and/or cause memory overflow for large out-of-memory data sources. If a filter is specified, only applications matching the filter are returned.\n\nOptional keyword arguments:\n\nignore_fulltext: If true, full text information will not be retrieved.   This may be used to improve runtime and memory footprint for large datasets.\n\n\n\n\n\n","category":"function"},{"location":"#PatentsBase.applications-Tuple{AbstractFamily}","page":"PatentsBase","title":"PatentsBase.applications","text":"applications(f::AbstractFamily)\n\nreturn a Vector{<:AbstractApplication} with all applications in family f.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.applications-Tuple{AbstractPortfolio}","page":"PatentsBase","title":"PatentsBase.applications","text":"applications(p::AbstractPortfolio)\n\nreturn a Vector{<:AbstractApplication} with all applications in portfolio p.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.bibentry-Tuple{AbstractNPLCitation}","page":"PatentsBase","title":"PatentsBase.bibentry","text":"bibentry(c::AbstractNPLCitation, lang::String)\n\nReturns a String with the bibliography entry of the NPL citation c.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.citationgraph","page":"PatentsBase","title":"PatentsBase.citationgraph","text":"citationgraph(families::Vector{<:AbstractFamily})\n\nCompute the graph created by family-to-family citations from families.\n\n\n\n\n\n","category":"function"},{"location":"#PatentsBase.citations","page":"PatentsBase","title":"PatentsBase.citations","text":"citations(a::AbstractApplication)\ncitations(f::AbstractFamily)\n\nReturn a Vector{<:AbstractCitation} with all citations from a patent application or family.\n\n\n\n\n\n","category":"function"},{"location":"#PatentsBase.claims-Tuple{AbstractApplication}","page":"PatentsBase","title":"PatentsBase.claims","text":"claims(a::AbstractApplication)\n\nreturn information on patent claims contained in application a.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.classification","page":"PatentsBase","title":"PatentsBase.classification","text":"classification(a::AbstractApplication)\nclassification(f::AbstractFamily)\nclassification(c::AbstractClassificationSystem, a::AbstractApplication)\nclassification(c::AbstractClassificationSystem, f::AbstractFamily)\n\nObtain a vector of technology classification entries for application a or family f according to classification system c. Defaults to CPC if no system is specified.\n\n\n\n\n\n","category":"function"},{"location":"#PatentsBase.description-Tuple{AbstractApplication}","page":"PatentsBase","title":"PatentsBase.description","text":"description(a::AbstractApplication)\n\nreturn the description (or abstract) for application a.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.doc_number","page":"PatentsBase","title":"PatentsBase.doc_number","text":"doc_number(a::AbstractApplication)\ndoc_number(a::AbstractApplicationID)\n\nReturn a String with the jurisdiction-specific document number of the application a.\n\n\n\n\n\n","category":"function"},{"location":"#PatentsBase.doi-Tuple{AbstractNPLCitation}","page":"PatentsBase","title":"PatentsBase.doi","text":"doi(c::AbstractNPLCitation, lang::String)\n\nReturns a String with the Digital Object Identifier (DOI) for NPL citation c. If multiple IDs matching the DOI format are found, the first is returned. Returns nothing if no ID field matches the DOI format.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.families","page":"PatentsBase","title":"PatentsBase.families","text":"families(ds::AbstractDataSource, kwargs...)\nfamilies(ds::AbstractDataSource, filter::AbstractFilter, kwargs...)\n\nReturn a Vector{<:AbstractFamily} with all patent families contained in ds. May take a long time and/or cause memory overflow for large out-of-memory data sources. If a filter is specified, only families matching the filter are returned.\n\nOptional keyword arguments:\n\nignore_fulltext: If true, full text information will not be retrieved.   This may be used to improve runtime and memory footprint for large datasets.\n\n\n\n\n\n","category":"function"},{"location":"#PatentsBase.find_application-Tuple{AbstractApplicationReference, AbstractDataSource}","page":"PatentsBase","title":"PatentsBase.find_application","text":"find_application(ref::AbstractApplicationReference, ds::AbstractDataSource)\n\nReturn the application referenced by ref if it is contained in the data source ds, otherwise return nothing.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.find_application-Tuple{AbstractPatentCitation, AbstractDataSource}","page":"PatentsBase","title":"PatentsBase.find_application","text":"find_application(c::AbstractPatentCitation, ds::AbstractDataSource)\n\nAttempt to retrieve the patent application referenced by the citation c from the data source ds and return it, or return nothing if it cannot be found.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.fulltext-Tuple{AbstractApplication}","page":"PatentsBase","title":"PatentsBase.fulltext","text":"fulltext(a::AbstractApplication)\n\nreturn the fulltext for application a.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.id-Tuple{Union{AbstractApplication, AbstractApplicationID}}","page":"PatentsBase","title":"PatentsBase.id","text":"id(a::AbstractApplication)\nid(a::AbstractApplicationID)\n\nReturn a String with the original application ID, consisting of country code, document number and kind identifier.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.inventors-Tuple{AbstractApplication}","page":"PatentsBase","title":"PatentsBase.inventors","text":"inventors(a::AbstractApplication)\n\nreturn a Vector{<:AbstractInventor} with information about the inventor(s) of application a.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.inventors-Tuple{AbstractFamily}","page":"PatentsBase","title":"PatentsBase.inventors","text":"inventors(f::AbstractFamily)\n\nreturn a Vector{<:AbstractInventor} with the unique set of inventors from all the applications in family f.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.jurisdiction","page":"PatentsBase","title":"PatentsBase.jurisdiction","text":"jurisdiction(a::AbstractApplication)\njurisdiction(a::AbstractApplicationID)\n\nReturn a String with the country code of the filing jurisdiction for the application a.\n\n\n\n\n\n","category":"function"},{"location":"#PatentsBase.kind","page":"PatentsBase","title":"PatentsBase.kind","text":"kind(a::AbstractApplication)\nkind(a::AbstractApplicationID)\n\nReturn a String with the kind code of the application a.\n\n\n\n\n\n","category":"function"},{"location":"#PatentsBase.name-Tuple{AbstractParty}","page":"PatentsBase","title":"PatentsBase.name","text":"name(p::AbstractParty)\n\nreturn the name of the party p.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.names-Tuple{AbstractParty}","page":"PatentsBase","title":"PatentsBase.names","text":"names(a::AbstractParty)\n\nreturn a Vector{String} of all names under which party p is known to appear.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.npl_citations","page":"PatentsBase","title":"PatentsBase.npl_citations","text":"npl_citations(a::AbstractApplication)\n\nReturn a Vector{<:AbstractNPLCitation} with all NPL citations from a patent application or family.\n\n\n\n\n\n","category":"function"},{"location":"#PatentsBase.owner-Tuple{AbstractPortfolio}","page":"PatentsBase","title":"PatentsBase.owner","text":"owner(p::AbstractPortfolio)\n\nreturn an AbstractApplicant representing the owner of portfolio p.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.patent_citations","page":"PatentsBase","title":"PatentsBase.patent_citations","text":"patent_citations(a::AbstractApplication)\npatent_citations(f::AbstractFamily)\n\nReturn a Vector{<:AbstractCitation} with all patent citations from a patent application or family.\n\n\n\n\n\n","category":"function"},{"location":"#PatentsBase.phase-Tuple{AbstractCitation}","page":"PatentsBase","title":"PatentsBase.phase","text":"phase(c::AbstractCitation)\n\nReturn a String specifying the phase in the patent process during which the citation c occured.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.refers_to-Tuple{AbstractApplicationReference, AbstractApplication}","page":"PatentsBase","title":"PatentsBase.refers_to","text":"refers_to(ref::AbstractApplicationReference, app::AbstractApplication)\n\nReturn true if app is the application referenced by ref, and false otherwise. In cases where identity cannot be checked due to incompatible types, implementations should default to false. The abstract reference implementation always returns false.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.siblings-Tuple{AbstractApplication, AbstractDataSource}","page":"PatentsBase","title":"PatentsBase.siblings","text":"siblings(a::AbstractApplication, ds::AbstractDataSource)\n\nreturn a Vector{<:AbstractApplication} with all applications from the data source ds that are in the same family as a.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.siblings-Tuple{AbstractApplication}","page":"PatentsBase","title":"PatentsBase.siblings","text":"siblings(a::AbstractApplication)\n\nreturn a Vector{<:AbstractApplicationReference} with references to all applications that are in the same family as a.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.sourceid-Tuple{Union{AbstractApplication, AbstractApplicationID}}","page":"PatentsBase","title":"PatentsBase.sourceid","text":"sourceid(a::AbstractApplication)\nsourceid(a::AbstractApplicationID)\n\nReturn the id used in the data source, e.g. the lens_id for data obtained from Lens.org.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.symbol","page":"PatentsBase","title":"PatentsBase.symbol","text":"symbol(c::AbstractClassificationSymbol)\nsymbol(::AbstractClassificationLevel, c::AbstractClassificationSymbol)\n\nReturn a String representation of a classification symbol c down to a specified level l. If no level is specified, the complete symbol is returned.\n\n\n\n\n\n","category":"function"},{"location":"#PatentsBase.text-Tuple{AbstractContent, String}","page":"PatentsBase","title":"PatentsBase.text","text":"text(c::AbstractContent, lang::String)\n\nReturns a String with the localized version of the text of content field c for language lang. Concrete implementations should throw a Base.KeyError if there is no title for that locale.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.title-Tuple{AbstractApplication, String}","page":"PatentsBase","title":"PatentsBase.title","text":"title(a::AbstractApplication, lang::String)\n\nreturn a String with the localized title of application a for language lang.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.title-Tuple{AbstractApplication}","page":"PatentsBase","title":"PatentsBase.title","text":"title(a::AbstractApplication)\n\nreturn a AbstractTitle with information about the title of application a.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.title-Tuple{AbstractClassificationLevel, AbstractClassificationSymbol}","page":"PatentsBase","title":"PatentsBase.title","text":"title(::AbstractClassificationLevel, c::AbstractClassificationSymbol)\n\nReturn a String containing the full title of a classification c down to a specified level l.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.country-Tuple{AbstractParty}","page":"PatentsBase","title":"PatentsBase.country","text":"country(p::AbstractParty)\n\nreturn the country code of the country of residence of party p.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.external_ids-Tuple{AbstractNPLCitation}","page":"PatentsBase","title":"PatentsBase.external_ids","text":"external_ids(c::AbstractNPLCitation, lang::String)\n\nReturns a Vector{String} with the external database IDs recorded for the NPL citation c.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.forwardcitations","page":"PatentsBase","title":"PatentsBase.forwardcitations","text":"citedby(a::AbstractApplication)\ncitedby(f::AbstractFamily)\n\nReturn a Vector{<:AbstractPatentCitation} with citations of all patent applications known to cite a patent application or patent family. Note that even though these are represented by the AbstractPatentCitation interface, they are conceptually not citations in a strict sense.\n\n\n\n\n\n","category":"function"},{"location":"#PatentsBase.languages-Tuple{AbstractContent}","page":"PatentsBase","title":"PatentsBase.languages","text":"languages(c::AbstractContent)\n\nReturns a Vector{String} with all languages for which a version of the content field c is available.\n\n\n\n\n\n","category":"method"},{"location":"#PatentsBase.reference-Tuple{AbstractPatentCitation}","page":"PatentsBase","title":"PatentsBase.reference","text":"reference(c::AbstractPatentCitation)\n\nReturn an AbstractApplicationReference for the application cited in c.\n\n\n\n\n\n","category":"method"}]
}
